syntax="proto3";

import "google/protobuf/empty.proto";
option go_package="github.com/alexandreLamarre/dlock/api/v1alpha1";

package dlock;

service Dlock {
    rpc Lock(LockRequest) returns (stream LockResponse) {};
}

service Semaphore {
    rpc CreateSemaphore(google.protobuf.Empty) returns (google.protobuf.Empty) {};
    rpc DeleteSemaphore(google.protobuf.Empty) returns (google.protobuf.Empty) {};
    rpc Acquire(SemaphoreRequest) returns (stream SemaphoreResponse) {};
}

message LockRequest {
    string key = 1;
    bool tryLock = 2;
}

message LockResponse {
    LockEvent event = 1;
}

enum LockEvent {
    Acquired = 0;
    Failed = 1;
}

message SemaphoreRequest {
    string key = 1;
    bool tryLock = 2;
    int32 weight = 3;
}

message SemaphoreResponse {
    LockEvent event = 1;
    int32 load = 2;
    int32 capacity = 3;
}