// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1alpha1/dlock.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DlockClient is the client API for Dlock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DlockClient interface {
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (Dlock_LockClient, error)
}

type dlockClient struct {
	cc grpc.ClientConnInterface
}

func NewDlockClient(cc grpc.ClientConnInterface) DlockClient {
	return &dlockClient{cc}
}

func (c *dlockClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (Dlock_LockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dlock_ServiceDesc.Streams[0], "/dlock.Dlock/Lock", opts...)
	if err != nil {
		return nil, err
	}
	x := &dlockLockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dlock_LockClient interface {
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type dlockLockClient struct {
	grpc.ClientStream
}

func (x *dlockLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DlockServer is the server API for Dlock service.
// All implementations should embed UnimplementedDlockServer
// for forward compatibility
type DlockServer interface {
	Lock(*LockRequest, Dlock_LockServer) error
}

// UnimplementedDlockServer should be embedded to have forward compatible implementations.
type UnimplementedDlockServer struct {
}

func (UnimplementedDlockServer) Lock(*LockRequest, Dlock_LockServer) error {
	return status.Errorf(codes.Unimplemented, "method Lock not implemented")
}

// UnsafeDlockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DlockServer will
// result in compilation errors.
type UnsafeDlockServer interface {
	mustEmbedUnimplementedDlockServer()
}

func RegisterDlockServer(s grpc.ServiceRegistrar, srv DlockServer) {
	s.RegisterService(&Dlock_ServiceDesc, srv)
}

func _Dlock_Lock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DlockServer).Lock(m, &dlockLockServer{stream})
}

type Dlock_LockServer interface {
	Send(*LockResponse) error
	grpc.ServerStream
}

type dlockLockServer struct {
	grpc.ServerStream
}

func (x *dlockLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Dlock_ServiceDesc is the grpc.ServiceDesc for Dlock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dlock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dlock.Dlock",
	HandlerType: (*DlockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Lock",
			Handler:       _Dlock_Lock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1alpha1/dlock.proto",
}
