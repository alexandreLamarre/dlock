// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: internal/embedded/api/embedded.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedMutexClient is the client API for DistributedMutex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedMutexClient interface {
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (DistributedMutex_LockClient, error)
	Unlock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type distributedMutexClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedMutexClient(cc grpc.ClientConnInterface) DistributedMutexClient {
	return &distributedMutexClient{cc}
}

func (c *distributedMutexClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (DistributedMutex_LockClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributedMutex_ServiceDesc.Streams[0], "/embedded.DistributedMutex/Lock", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributedMutexLockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DistributedMutex_LockClient interface {
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type distributedMutexLockClient struct {
	grpc.ClientStream
}

func (x *distributedMutexLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *distributedMutexClient) Unlock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/embedded.DistributedMutex/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedMutexServer is the server API for DistributedMutex service.
// All implementations should embed UnimplementedDistributedMutexServer
// for forward compatibility
type DistributedMutexServer interface {
	Lock(*LockRequest, DistributedMutex_LockServer) error
	Unlock(context.Context, *LockRequest) (*emptypb.Empty, error)
}

// UnimplementedDistributedMutexServer should be embedded to have forward compatible implementations.
type UnimplementedDistributedMutexServer struct {
}

func (UnimplementedDistributedMutexServer) Lock(*LockRequest, DistributedMutex_LockServer) error {
	return status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedDistributedMutexServer) Unlock(context.Context, *LockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}

// UnsafeDistributedMutexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedMutexServer will
// result in compilation errors.
type UnsafeDistributedMutexServer interface {
	mustEmbedUnimplementedDistributedMutexServer()
}

func RegisterDistributedMutexServer(s grpc.ServiceRegistrar, srv DistributedMutexServer) {
	s.RegisterService(&DistributedMutex_ServiceDesc, srv)
}

func _DistributedMutex_Lock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistributedMutexServer).Lock(m, &distributedMutexLockServer{stream})
}

type DistributedMutex_LockServer interface {
	Send(*LockResponse) error
	grpc.ServerStream
}

type distributedMutexLockServer struct {
	grpc.ServerStream
}

func (x *distributedMutexLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DistributedMutex_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedMutexServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/embedded.DistributedMutex/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedMutexServer).Unlock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedMutex_ServiceDesc is the grpc.ServiceDesc for DistributedMutex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedMutex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "embedded.DistributedMutex",
	HandlerType: (*DistributedMutexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unlock",
			Handler:    _DistributedMutex_Unlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Lock",
			Handler:       _DistributedMutex_Lock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/embedded/api/embedded.proto",
}
